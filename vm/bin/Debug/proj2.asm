SIZE .INT 10;
ARR .INT 10;
.INT 2;
.INT 3;
.INT 4;
.INT 15;
.INT -6;
.INT 7;
.INT 8;
.INT 9;
.INT 10;
I .BYT I;
E .BYT E;
V .BYT V;
N .BYT N;
O .BYT O;
D .BYT D;
U .BYT U;
M .BYT M;
A .BYT A;
G .BYT G;
S .BYT S;
NL .INT 10;
SP .INT 32;
ZERO .INT 0;
TWO .INT 2;
THREE .INT 3;

LDR R1 ZERO;//R1 i
LDR R2 TWO;//R2 TWO
LDA R5 ARR;//R5 ARR POINTER
LDR R6 ZERO;//R6 SUM
LDR R8 SIZE;//R8 SIZE

WHILE MOV R9 R8;
CMP R9 R1;
BRZ R9 ENDWHILE;
LDR R3 R5;//Mod
LDR R4 ZERO;
CMP R3 R4;//SEE IF IT'S A NEGATIVE/POSITIVE NUMBER
LDR R3 R5;
ADD R6 R3;
BLT R3 ELSENEG;
CMP R3 R2;
BRZ R3 ISEVEN;//THE NUMBER IS 2
BLT R3 ISODD;//THE NUMBER IS 1
LDR R3 R5;

IFPOS SUB R3 R2;
MOV R4 R3;
CMP R4 R2;
BRZ R4 ISEVEN;
BGT R4 IFPOS;
BLT R4 ISODD;

ELSENEG ADD R3 R2;
MOV R4 R3;
CMP R4 R2;
BRZ R4 ISEVEN;
BLT R4 ELSENEG;
BGT R4 ISODD;

ISEVEN LDR R0 R5;
ADI R5 4;//ADVANCE POINTER
ADI R1 1;//++
TRP 1;
LDB R0 SP;
TRP 3;
LDB R0 I;
TRP 3;
LDB R0 S;
TRP 3;
LDB R0 SP;
TRP 3;
LDB R0 E;
TRP 3;
LDB R0 V;
TRP 3;
LDB R0 E;
TRP 3;
LDB R0 N;
TRP 3;
LDB R0 NL;
TRP 3;
JMP WHILE;

ISODD LDR R0 R5;
ADI R5 4;//ADVANCE POINTER
ADI R1 1;//++
TRP 1;
LDB R0 SP;
TRP 3;
LDB R0 I;
TRP 3;
LDB R0 S;
TRP 3;
LDB R0 SP;
TRP 3;
LDB R0 O;
TRP 3;
LDB R0 D;
TRP 3;
LDB R0 D;
TRP 3;
LDB R0 NL;
TRP 3;
JMP WHILE;

ENDWHILE LDB R0 S;
TRP 3;
LDB R0 U;
TRP 3;
LDB R0 M;
TRP 3;
LDB R0 SP;
TRP 3;
LDB R0 I;
TRP 3;
LDB R0 S;
TRP 3;
LDB R0 SP;
TRP 3;
MOV R0 R6;
TRP 1;
LDB R0 NL;
TRP 3;

LDA R5 D;// D
LDB R2 D;
STB R2 R5;
ADI R5 1;
LDB R2 A;// A
STB R2 R5;
ADI R5 1;
LDB R2 G;// G
STB R2 R5;
ADI R5 1;
LDB R2 S;// S
STB R2 R5;
LDR R3 THREE;
SUB R5 R3;//RESET INDEX TO D
LDB R0 R5;//PRINT D
ADI R5 1;//INDEX++
TRP 3;
LDB R0 R5;//PRINT A
ADI R5 1;//INDEX++
TRP 3;
LDB R0 R5;//PRINT G
ADI R5 1;//INDEX++
TRP 3;
LDB R0 R5;//PRINT S
TRP 3;
LDB R0 SP;
TRP 3;

SUB R5 R3;//RESET INDEX TO D 
LDR R6 R5;//& GET VALUE OF 'DAGS'
MOV R0 R6;
TRP 1;
LDB R0 NL;
TRP 3;

LDB R1 R5;//GET D
ADI R5 2;
LDB R2 R5;//GET G
STB R1 R5;//PUT D WHERE G WAS
LDR R3 TWO;
SUB R5 R3;
STB R2 R5;//PUT G WHERE D WAS
LDB R0 R5;//PRINT G
ADI R5 1;//INDEX++
TRP 3;
LDB R0 R5;//PRINT A
ADI R5 1;//INDEX++
TRP 3;
LDB R0 R5;//PRINT D
ADI R5 1;//INDEX++
TRP 3;
LDB R0 R5;//PRINT S
TRP 3;
LDB R0 SP;
TRP 3;
LDR R3 THREE;
SUB R5 R3;//RESET INDEX TO D 
LDR R7 R5;//& GET VALUE OF 'DAGS'
MOV R0 R7;
TRP 1;
LDB R0 NL;
TRP 3;

SUB R7 R6;//GADS - DAGS
MOV R0 R7;
TRP 1;
TRP 0;//END PROGRAM.